// <auto-generated />
using System;
using CLEAN.API.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CLEAN.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("CLEAN.API.Domain.Cart", b =>
                {
                    b.Property<Guid>("CartID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserID")
                        .HasColumnType("char(36)");

                    b.HasKey("CartID");

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            CartID = new Guid("264eb98d-c866-4f0c-9537-75d7301a25b2"),
                            Name = "Cart for John Doe",
                            UserID = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            CartID = new Guid("1abdabbb-2a84-4392-9c5a-da71b4151bec"),
                            Name = "Cart for Jane Doe",
                            UserID = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("CLEAN.API.Domain.CartItem", b =>
                {
                    b.Property<Guid>("CartItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CartID")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartItemID");

                    b.HasIndex("CartID");

                    b.ToTable("CartItems");

                    b.HasData(
                        new
                        {
                            CartItemID = new Guid("dc1a0ad6-b650-4c1f-ac0e-678179290b41"),
                            CartID = new Guid("264eb98d-c866-4f0c-9537-75d7301a25b2"),
                            Price = 49.99m,
                            ProductName = "Product A",
                            Quantity = 2
                        },
                        new
                        {
                            CartItemID = new Guid("1b9c633f-10d3-4578-a4df-4d063c552f0c"),
                            CartID = new Guid("1abdabbb-2a84-4392-9c5a-da71b4151bec"),
                            Price = 99.99m,
                            ProductName = "Product B",
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("CLEAN.API.Domain.CartItem", b =>
                {
                    b.HasOne("CLEAN.API.Domain.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("CLEAN.API.Domain.Cart", b =>
                {
                    b.Navigation("CartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
